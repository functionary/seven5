// Automatically generated by MockGen. DO NOT EDIT!
// Source: auth/auth.go

package auth

import (
	oauth "code.google.com/p/goauth2/oauth"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of ServiceConnector interface
type MockServiceConnector struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceConnectorRecorder
}

// Recorder for MockServiceConnector (not exported)
type _MockServiceConnectorRecorder struct {
	mock *MockServiceConnector
}

func NewMockServiceConnector(ctrl *gomock.Controller) *MockServiceConnector {
	mock := &MockServiceConnector{ctrl: ctrl}
	mock.recorder = &_MockServiceConnectorRecorder{mock}
	return mock
}

func (_m *MockServiceConnector) EXPECT() *_MockServiceConnectorRecorder {
	return _m.recorder
}

func (_m *MockServiceConnector) AuthURL(_param0 string, _param1 string) string {
	ret := _m.ctrl.Call(_m, "AuthURL", _param0, _param1)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceConnectorRecorder) AuthURL(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthURL", arg0, arg1)
}

func (_m *MockServiceConnector) CodeValueName() string {
	ret := _m.ctrl.Call(_m, "CodeValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceConnectorRecorder) CodeValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CodeValueName")
}

func (_m *MockServiceConnector) ErrorValueName() string {
	ret := _m.ctrl.Call(_m, "ErrorValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceConnectorRecorder) ErrorValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ErrorValueName")
}

func (_m *MockServiceConnector) StateValueName() string {
	ret := _m.ctrl.Call(_m, "StateValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceConnectorRecorder) StateValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StateValueName")
}

func (_m *MockServiceConnector) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockServiceConnectorRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockServiceConnector) ExchangeForToken(_param0 string, _param1 string) (*oauth.Transport, error) {
	ret := _m.ctrl.Call(_m, "ExchangeForToken", _param0, _param1)
	ret0, _ := ret[0].(*oauth.Transport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceConnectorRecorder) ExchangeForToken(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExchangeForToken", arg0, arg1)
}

// Mock of PageMapper interface
type MockPageMapper struct {
	ctrl     *gomock.Controller
	recorder *_MockPageMapperRecorder
}

// Recorder for MockPageMapper (not exported)
type _MockPageMapperRecorder struct {
	mock *MockPageMapper
}

func NewMockPageMapper(ctrl *gomock.Controller) *MockPageMapper {
	mock := &MockPageMapper{ctrl: ctrl}
	mock.recorder = &_MockPageMapperRecorder{mock}
	return mock
}

func (_m *MockPageMapper) EXPECT() *_MockPageMapperRecorder {
	return _m.recorder
}

func (_m *MockPageMapper) ErrorPage(_param0 ServiceConnector, _param1 string) string {
	ret := _m.ctrl.Call(_m, "ErrorPage", _param0, _param1)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPageMapperRecorder) ErrorPage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ErrorPage", arg0, arg1)
}

func (_m *MockPageMapper) LoginLandingPage(_param0 ServiceConnector, _param1 string, _param2 string) string {
	ret := _m.ctrl.Call(_m, "LoginLandingPage", _param0, _param1, _param2)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPageMapperRecorder) LoginLandingPage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoginLandingPage", arg0, arg1, arg2)
}

func (_m *MockPageMapper) LogoutLandingPage(_param0 ServiceConnector) string {
	ret := _m.ctrl.Call(_m, "LogoutLandingPage", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPageMapperRecorder) LogoutLandingPage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogoutLandingPage", arg0)
}

// Mock of AppConnector interface
type MockAppConnector struct {
	ctrl     *gomock.Controller
	recorder *_MockAppConnectorRecorder
}

// Recorder for MockAppConnector (not exported)
type _MockAppConnectorRecorder struct {
	mock *MockAppConnector
}

func NewMockAppConnector(ctrl *gomock.Controller) *MockAppConnector {
	mock := &MockAppConnector{ctrl: ctrl}
	mock.recorder = &_MockAppConnectorRecorder{mock}
	return mock
}

func (_m *MockAppConnector) EXPECT() *_MockAppConnectorRecorder {
	return _m.recorder
}

func (_m *MockAppConnector) Login() {
	_m.ctrl.Call(_m, "Login")
}

func (_mr *_MockAppConnectorRecorder) Login() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Login")
}

func (_m *MockAppConnector) Logout() {
	_m.ctrl.Call(_m, "Logout")
}

func (_mr *_MockAppConnectorRecorder) Logout() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Logout")
}

// Mock of OauthClientDetail interface
type MockOauthClientDetail struct {
	ctrl     *gomock.Controller
	recorder *_MockOauthClientDetailRecorder
}

// Recorder for MockOauthClientDetail (not exported)
type _MockOauthClientDetailRecorder struct {
	mock *MockOauthClientDetail
}

func NewMockOauthClientDetail(ctrl *gomock.Controller) *MockOauthClientDetail {
	mock := &MockOauthClientDetail{ctrl: ctrl}
	mock.recorder = &_MockOauthClientDetailRecorder{mock}
	return mock
}

func (_m *MockOauthClientDetail) EXPECT() *_MockOauthClientDetailRecorder {
	return _m.recorder
}

func (_m *MockOauthClientDetail) ClientId(_param0 ServiceConnector) string {
	ret := _m.ctrl.Call(_m, "ClientId", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthClientDetailRecorder) ClientId(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientId", arg0)
}

func (_m *MockOauthClientDetail) ClientSecret(_param0 ServiceConnector) string {
	ret := _m.ctrl.Call(_m, "ClientSecret", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthClientDetailRecorder) ClientSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientSecret", arg0)
}
