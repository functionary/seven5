// Automatically generated by MockGen. DO NOT EDIT!
// Source: auth.go

package auth

import (
	gomock "code.google.com/p/gomock/gomock"
	http "net/http"
)

// Mock of OauthCred interface
type MockOauthCred struct {
	ctrl     *gomock.Controller
	recorder *_MockOauthCredRecorder
}

// Recorder for MockOauthCred (not exported)
type _MockOauthCredRecorder struct {
	mock *MockOauthCred
}

func NewMockOauthCred(ctrl *gomock.Controller) *MockOauthCred {
	mock := &MockOauthCred{ctrl: ctrl}
	mock.recorder = &_MockOauthCredRecorder{mock}
	return mock
}

func (_m *MockOauthCred) EXPECT() *_MockOauthCredRecorder {
	return _m.recorder
}

func (_m *MockOauthCred) Token() string {
	ret := _m.ctrl.Call(_m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthCredRecorder) Token() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Token")
}

func (_m *MockOauthCred) Secret() string {
	ret := _m.ctrl.Call(_m, "Secret")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthCredRecorder) Secret() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Secret")
}

// Mock of OauthConnection interface
type MockOauthConnection struct {
	ctrl     *gomock.Controller
	recorder *_MockOauthConnectionRecorder
}

// Recorder for MockOauthConnection (not exported)
type _MockOauthConnectionRecorder struct {
	mock *MockOauthConnection
}

func NewMockOauthConnection(ctrl *gomock.Controller) *MockOauthConnection {
	mock := &MockOauthConnection{ctrl: ctrl}
	mock.recorder = &_MockOauthConnectionRecorder{mock}
	return mock
}

func (_m *MockOauthConnection) EXPECT() *_MockOauthConnectionRecorder {
	return _m.recorder
}

func (_m *MockOauthConnection) SendAuthenticated(_param0 *http.Request) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "SendAuthenticated", _param0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOauthConnectionRecorder) SendAuthenticated(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendAuthenticated", arg0)
}

// Mock of OauthConnector interface
type MockOauthConnector struct {
	ctrl     *gomock.Controller
	recorder *_MockOauthConnectorRecorder
}

// Recorder for MockOauthConnector (not exported)
type _MockOauthConnectorRecorder struct {
	mock *MockOauthConnector
}

func NewMockOauthConnector(ctrl *gomock.Controller) *MockOauthConnector {
	mock := &MockOauthConnector{ctrl: ctrl}
	mock.recorder = &_MockOauthConnectorRecorder{mock}
	return mock
}

func (_m *MockOauthConnector) EXPECT() *_MockOauthConnectorRecorder {
	return _m.recorder
}

func (_m *MockOauthConnector) ClientTokenValueName() string {
	ret := _m.ctrl.Call(_m, "ClientTokenValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthConnectorRecorder) ClientTokenValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientTokenValueName")
}

func (_m *MockOauthConnector) CodeValueName() string {
	ret := _m.ctrl.Call(_m, "CodeValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthConnectorRecorder) CodeValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CodeValueName")
}

func (_m *MockOauthConnector) ErrorValueName() string {
	ret := _m.ctrl.Call(_m, "ErrorValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthConnectorRecorder) ErrorValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ErrorValueName")
}

func (_m *MockOauthConnector) StateValueName() string {
	ret := _m.ctrl.Call(_m, "StateValueName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthConnectorRecorder) StateValueName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StateValueName")
}

func (_m *MockOauthConnector) Phase1(state string, callbackPath string) (OauthCred, error) {
	ret := _m.ctrl.Call(_m, "Phase1", state, callbackPath)
	ret0, _ := ret[0].(OauthCred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOauthConnectorRecorder) Phase1(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Phase1", arg0, arg1)
}

func (_m *MockOauthConnector) UserInteractionURL(p1creds OauthCred, state string, callbackPath string) string {
	ret := _m.ctrl.Call(_m, "UserInteractionURL", p1creds, state, callbackPath)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthConnectorRecorder) UserInteractionURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserInteractionURL", arg0, arg1, arg2)
}

func (_m *MockOauthConnector) Phase2(clientToken string, code string) (OauthConnection, error) {
	ret := _m.ctrl.Call(_m, "Phase2", clientToken, code)
	ret0, _ := ret[0].(OauthConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOauthConnectorRecorder) Phase2(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Phase2", arg0, arg1)
}

func (_m *MockOauthConnector) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthConnectorRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

// Mock of OauthClientDetail interface
type MockOauthClientDetail struct {
	ctrl     *gomock.Controller
	recorder *_MockOauthClientDetailRecorder
}

// Recorder for MockOauthClientDetail (not exported)
type _MockOauthClientDetailRecorder struct {
	mock *MockOauthClientDetail
}

func NewMockOauthClientDetail(ctrl *gomock.Controller) *MockOauthClientDetail {
	mock := &MockOauthClientDetail{ctrl: ctrl}
	mock.recorder = &_MockOauthClientDetailRecorder{mock}
	return mock
}

func (_m *MockOauthClientDetail) EXPECT() *_MockOauthClientDetailRecorder {
	return _m.recorder
}

func (_m *MockOauthClientDetail) ClientId(serviceName string) string {
	ret := _m.ctrl.Call(_m, "ClientId", serviceName)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthClientDetailRecorder) ClientId(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientId", arg0)
}

func (_m *MockOauthClientDetail) ClientSecret(serviceName string) string {
	ret := _m.ctrl.Call(_m, "ClientSecret", serviceName)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOauthClientDetailRecorder) ClientSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientSecret", arg0)
}
