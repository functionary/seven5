// Automatically generated by MockGen. DO NOT EDIT!
// Source: auth/env.go

package auth

import (
	http "net/http"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of DeploymentEnvironment interface
type MockDeploymentEnvironment struct {
	ctrl     *gomock.Controller
	recorder *_MockDeploymentEnvironmentRecorder
}

// Recorder for MockDeploymentEnvironment (not exported)
type _MockDeploymentEnvironmentRecorder struct {
	mock *MockDeploymentEnvironment
}

func NewMockDeploymentEnvironment(ctrl *gomock.Controller) *MockDeploymentEnvironment {
	mock := &MockDeploymentEnvironment{ctrl: ctrl}
	mock.recorder = &_MockDeploymentEnvironmentRecorder{mock}
	return mock
}

func (_m *MockDeploymentEnvironment) EXPECT() *_MockDeploymentEnvironmentRecorder {
	return _m.recorder
}

func (_m *MockDeploymentEnvironment) IsTest() bool {
	ret := _m.ctrl.Call(_m, "IsTest")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDeploymentEnvironmentRecorder) IsTest() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsTest")
}

func (_m *MockDeploymentEnvironment) TestPort() int {
	ret := _m.ctrl.Call(_m, "TestPort")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDeploymentEnvironmentRecorder) TestPort() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestPort")
}

func (_m *MockDeploymentEnvironment) RedirectHost(_param0 ServiceConnector) string {
	ret := _m.ctrl.Call(_m, "RedirectHost", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDeploymentEnvironmentRecorder) RedirectHost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RedirectHost", arg0)
}

// Mock of PublicSettingsDetail interface
type MockPublicSettingsDetail struct {
	ctrl     *gomock.Controller
	recorder *_MockPublicSettingsDetailRecorder
}

// Recorder for MockPublicSettingsDetail (not exported)
type _MockPublicSettingsDetailRecorder struct {
	mock *MockPublicSettingsDetail
}

func NewMockPublicSettingsDetail(ctrl *gomock.Controller) *MockPublicSettingsDetail {
	mock := &MockPublicSettingsDetail{ctrl: ctrl}
	mock.recorder = &_MockPublicSettingsDetailRecorder{mock}
	return mock
}

func (_m *MockPublicSettingsDetail) EXPECT() *_MockPublicSettingsDetailRecorder {
	return _m.recorder
}

func (_m *MockPublicSettingsDetail) PublicSetting(_param0 string) string {
	ret := _m.ctrl.Call(_m, "PublicSetting", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPublicSettingsDetailRecorder) PublicSetting(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublicSetting", arg0)
}

func (_m *MockPublicSettingsDetail) PublicSettingHandler() func(http.ResponseWriter, *http.Request) {
	ret := _m.ctrl.Call(_m, "PublicSettingHandler")
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

func (_mr *_MockPublicSettingsDetailRecorder) PublicSettingHandler() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublicSettingHandler")
}

// Mock of ProjectFinder interface
type MockProjectFinder struct {
	ctrl     *gomock.Controller
	recorder *_MockProjectFinderRecorder
}

// Recorder for MockProjectFinder (not exported)
type _MockProjectFinderRecorder struct {
	mock *MockProjectFinder
}

func NewMockProjectFinder(ctrl *gomock.Controller) *MockProjectFinder {
	mock := &MockProjectFinder{ctrl: ctrl}
	mock.recorder = &_MockProjectFinderRecorder{mock}
	return mock
}

func (_m *MockProjectFinder) EXPECT() *_MockProjectFinderRecorder {
	return _m.recorder
}

func (_m *MockProjectFinder) ProjectFind(target string, projectName string, flavor FileFlavor) (string, error) {
	ret := _m.ctrl.Call(_m, "ProjectFind", target, projectName, flavor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProjectFinderRecorder) ProjectFind(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProjectFind", arg0, arg1, arg2)
}
