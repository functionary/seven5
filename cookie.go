package seven5

import (
	"code.google.com/p/goauth2/oauth"
	"errors"
	"fmt"
	"net/http"
)

const (
	SESSION_COOKIE = "%s-seven5-session"
)

var (
	NO_SUCH_COOKIE = errors.New("Cannot find cookie")
)

//CookieMapper mediates the interaction between requests, sessions, and cookies
//on one side and sessions on the other.  Most applications probably want to implement the 
//SessionManager interface and pass that to NewSimpleCookieMapper who will handle everything
//outside of the applications semantics.
type CookieMapper interface {
	CookieName() string
	Session(*http.Request) (Session, error)
	AssociateCookie(http.ResponseWriter, Session)
	RemoveCookie(http.ResponseWriter)
	Generate(providerName string, trans *oauth.Transport, req *http.Request,
		state string) (Session, error)
	Destroy(*http.Request) error
}

//SimpleCookieMapper is a default, cookie mapper that maps UDID strings to Session
//objects and uses a simple cookie scheme to extract the UDIDs from requests generated by the
//browser. It expects to have a companion object of type SessionManager to handle application
//semantics.
type SimpleCookieMapper struct {
	cook	string
	mgr	SessionManager
}

//NewSimpleCookieMapper creates an instance of CookieMapper that wraps around a 
//SessionManager supplied by the caller.  
func NewSimpleCookieMapper(appName string, m SessionManager) CookieMapper {
	result := &SimpleCookieMapper{
		cook:	fmt.Sprintf(SESSION_COOKIE, appName),
		mgr:	m,
	}
	return result
}

//AssociateCookie is used to effectively "Log in" a particular user by associating a session
//with a response w that will be sent back to their browser.
func (self *SimpleCookieMapper) AssociateCookie(w http.ResponseWriter, s Session) {
	cookie := &http.Cookie{
		Name:	self.CookieName(),
		Value:	s.SessionId(),
		Path:	"/",
	}
	http.SetCookie(w, cookie)
}

//RemoveCookie is used to effectively "Log out" a particular user by removing the association of a session
//with a response w that will be sent back to their browser.
func (self *SimpleCookieMapper) RemoveCookie(w http.ResponseWriter) {
	cookie := &http.Cookie{
		Name:	self.CookieName(),
		Value:	"",
		Path:	"/",
		MaxAge:	-1,
	}
	http.SetCookie(w, cookie)
}

//Session returns the session associated with a given request or nil if no session is known.  Usually
//this association is checked via a cookie.  
func (self *SimpleCookieMapper) Session(r *http.Request) (Session, error) {
	c, err := r.Cookie(self.CookieName())
	if err == http.ErrNoCookie {
		return nil, NO_SUCH_COOKIE
	}
	return self.mgr.Find(c.Value)
}

//Generate is the means of generating a new session.  This implementation delegates most
//of the responsibiliy here to SessionManager.
func (self *SimpleCookieMapper) Generate(providerName string, trans *oauth.Transport, req *http.Request,
	state string) (Session, error) {
	return self.mgr.Generate()
}

//CookieName returns the name of the cookie used for this application by this session manager.
func (self *SimpleCookieMapper) CookieName() string {
	return self.cook
}

//Destroys the current session by delegating to the supplied SessionManager after converting
//the cookie into a session id.
func (self *SimpleCookieMapper) Destroy(r *http.Request) error {
	c, err := r.Cookie(self.CookieName())
	if err == http.ErrNoCookie {
		return NO_SUCH_COOKIE
	}
	return self.mgr.Destroy(c.Value)
}
