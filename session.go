package seven5

import (
	"code.google.com/p/goauth2/oauth"
	"fmt"
	"net/http"
)

const (
	SESSION_COOKIE = "%s-seven5-session"
)

var (
	//Cookie is the place we calculate, once, the name of the cookie.  Usually this is
	//'appName-seven5-session'.
	CookieName string
)

//SessionManager mediates the interaction between requests, authentication systems, and cookies
//on one side and sessions on the other.  Most real application will probably be satisfied
//with the SimpleSessionManager, this interface is provided for applications that want more
//complex semantics.
type SessionManager interface {
	Session(*http.Request) Session
	AssociateCookie(http.ResponseWriter, Session)
	Generate(providerName string, trans *oauth.Transport, req *http.Request, state string) Session
}

//Session is the _minimal_ interface to a session.  Most real applications should create their
//implementation of the Session interface.
type Session interface {
	SessionId() string
	Transport(provider string) *oauth.Transport
}

//SessionGenerator is a function that creates new functions given the parameters supplied.  It
//is called when a session is "initialized", typically by the user logging in.  Most real applications
//will need to supply a SessionGenerator that works to generate their particular implementation
//of Session.  
type SessionGenerator func(id string, providerName string, trans *oauth.Transport,
	req *http.Request, state string) Session

//SimpleSessionManager is a default, simple session manager that maps UDID strings to Session
//objects and uses a simple cookie scheme to extract the UDIDs from requests generated by the
//browser.
type SimpleSessionManager struct {
	Name        string
	IdToSession map[string]Session
	Gen         SessionGenerator
}

//SimpleSession is a simple, embeddable implementation of Session for code that wants to quickly
//handle the implementation of Session.  Typical applications will simply embed this struct
//in their particular implementation of Session.
type SimpleSession struct {
	id    string
	trans map[string]*oauth.Transport
}

//NewSimpleSessionManager creates a new simple session manager that is hooked to a particular
//browser cookie via the appName parameter and a particular Session implementation via
//the gen parameter.
func NewSimpleSessionManager(appName string, gen SessionGenerator) SessionManager {
	result := &SimpleSessionManager{
		Name:        appName,
		IdToSession: make(map[string]Session),
		Gen:         gen,
	}
	return result
}

//AssociateCookie is used to effectively "Log in" a particular user by associating a session
//with a response w that will be sent back to their browser.
func (self *SimpleSessionManager) AssociateCookie(w http.ResponseWriter, s Session) {
	cookie := &http.Cookie{
		Name:  cookieName(self.Name),
		Value: s.SessionId(),
		Path:  "/",
	}
	http.SetCookie(w, cookie)
}

//Session returns the session associated with a given request or nil if no session is known.  Usually
//this association is checked via a cookie.  However,
func (self *SimpleSessionManager) Session(r *http.Request) Session {
	c, err := r.Cookie(cookieName(self.Name))
	if err == http.ErrNoCookie {
		fmt.Printf("didn't find a cookie for %s\n", cookieName(self.Name))
		return nil
	}

	s, ok := self.IdToSession[c.Value]
	if !ok {
		fmt.Printf("didn't find a session for %s\n", c)
		return nil
	}

	return s
}

func (self *SimpleSessionManager) Generate(providerName string, trans *oauth.Transport, req *http.Request, state string) Session {
	return self.Gen(UDID(), providerName, trans, req, state)
}

//SessionId returns the sessionId (usually a UDID).
func (self *SimpleSession) SessionId() string {
	return self.id
}

//SessionId returns the oauth token associated with this session.
func (self *SimpleSession) Transport(provider string) *oauth.Transport {
	return self.trans[provider]
}

//SimpleSessionGenerator is a SessionGenerator function for applications that want to use
//the SimpleSession as their Session implementation. 
func SimpleSessionGenerator(id string, providerName string, trans *oauth.Transport,
	ignored_request *http.Request, ignored_state string) Session {
	providerToTransport := make(map[string]*oauth.Transport)
	providerToTransport[providerName] = trans
	return &SimpleSession{id: id, trans: providerToTransport}
}

//cookieName computes the cookie name to be used with a particular app name.
func cookieName(appName string) string {
	if CookieName == "" {
		CookieName = fmt.Sprintf(SESSION_COOKIE, appName)
	}
	return CookieName
}
